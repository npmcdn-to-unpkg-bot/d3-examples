{
  "name": "D3-examples",
  "tagline": "Data visualization samples implemented by d3.js.",
  "body": "### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here [using GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/), select a template crafted by a designer, and publish. After your page is generated, you can check out the new `gh-pages` branch locally. If you’re using GitHub Desktop, simply sync your repository and you’ll see the new branch.\r\n\r\n<iframe>\r\n<!DOCTYPE html>\r\n<meta charset=\"utf-8\">\r\n  <style>\r\n    .links line {\r\n      stroke: #999;\r\n      stroke-opacity: 0.6;\r\n    }\r\n    .nodes circle {\r\n      stroke: #fff;\r\n      stroke-width: 1.5px;\r\n    }\r\n  </style>\r\n  <svg width=\"960\" height=\"600\"></svg>\r\n<script src=\"https://d3js.org/d3.v4.min.js\"></script>\r\n  <script>\r\n    var svg = d3.select(\"svg\"),\r\n        width = +svg.attr(\"width\"),\r\n        height = +svg.attr(\"height\");\r\n    // construct a new ordinal scale and a categorical scheme with 20 colors\r\n    var color = d3.scaleOrdinal(d3.schemeCategory20);\r\n\r\n    // create a force simulation, if nodes is not specified, it defaults to the empty array\r\n    var simulation = d3.forceSimulation()\r\n        .force(\"link\",d3.forceLink().id(function(d){return d.id;}))\r\n        .force(\"charge\",d3.forceManyBody())\r\n        .force(\"center\", d3.forceCenter(width/2, height/2));\r\n    // load data\r\n    d3.json(\"data/miserables.json\", function(error, graph){\r\n      if(error) throw error;\r\n      // define links\r\n      var link = svg.append(\"g\")\r\n          .attr(\"class\",\"links\")\r\n          .selectAll(\"line\")\r\n          .data(graph.links)\r\n          .enter().append(\"line\")\r\n          .attr(\"stroke-width\", function(d){ return Math.sqrt(d.value); });\r\n      // define nodes, create a drag behavior\r\n      var node = svg.append(\"g\")\r\n      .attr(\"class\",\"nodes\")\r\n      .selectAll(\"circle\")\r\n      .data(graph.nodes)\r\n      .enter().append(\"circle\")\r\n        .attr(\"r\", 5)\r\n        .attr(\"fill\", function(d) { return color(d.group); })\r\n        .call(d3.drag()\r\n          .on(\"start\", dragstarted)\r\n          .on(\"drag\", dragged)\r\n          .on(\"end\",dragended));\r\n\r\n      node.append(\"title\")\r\n        .text(function(d) { return d.id; });\r\n\r\n      // initialize nodes position\r\n      simulation\r\n        .nodes(graph.nodes)\r\n        .on(\"tick\", ticked);\r\n      // \r\n      simulation.force(\"link\")\r\n        .links(graph.links);\r\n\r\n      function ticked() {\r\n        link\r\n          .attr(\"x1\", function(d) {return d.source.x; })\r\n          .attr(\"y1\", function(d) {return d.source.y; })\r\n          .attr(\"x2\", function(d) {return d.target.x; })\r\n          .attr(\"y2\", function(d) {return d.target.y; });\r\n        node\r\n          .attr(\"cx\", function(d) {return d.x; })\r\n          .attr(\"cy\", function(d) {return d.y; });\r\n      }\r\n    });\r\n\r\n    function dragstarted(d) {\r\n      if(!d3.event.active) simulation.alphaTarget(0.3).restart();\r\n      d.fx = d.x;\r\n      d.fy = d.y;\r\n    }\r\n\r\n    function dragged(d) {\r\n      d.fx = d3.event.x;\r\n      d.fy = d3.event.y;\r\n    }\r\n\r\n    function dragended(d) {\r\n      if(!d3.event.active) simulation.alphaTarget(0);\r\n      d.fx = null;\r\n      d.fy = null;\r\n    }\r\n\r\n    console.log(\"d3 starts.\")\r\n  </script>\r\n</iframe>",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}